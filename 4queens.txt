ex.no.9 solving 4-queen problem

aim - to write a python program to solve 4 queen problem.

algorithm:
1. Initialize N as the size of the chessboard (N = 4).
2. Define a function `printSolution(board)` to print the placement of queens on the board.
3. Define a function `isSafe(board, row, col)` to check if it's safe to place a queen at position (row, col) on the board.
4. Define a recursive function `solveNQUtil(board, col)` to solve the N-Queens problem using backtracking.
5. Define a function `solveNQ()` to initialize the chessboard, call `solveNQUtil()` to solve the problem, and print the solution.
6. Call `solveNQ()` to solve the 4-Queens problem and print the solution.

PROGRAM:
global N
N=4   
def isSafe(board, row, col):
	if any(board[row][i] == 1 for i in range(col)):
		return False
	if any(board[i][j] == 1 for i, j in zip(range(row, -1, -1), range(col, -1, -1))):
		return False
	if any(board[i][j] == 1 for i, j in zip(range(row, N, 1), range(col, -1, -1))):
		return False
	return True

def solveNQ(board, col):
	if col >= N:
		return True
	for i in range(N):
		if isSafe(board, i, col):
			board[i][col] = 1
			if solveNQ(board, col + 1):
				return True
			board[i][col] = 0
	return False

board = [[0] * N for _ in range(N)]
if solveNQ(board, 0):
    for row in board:
    	print(row)
